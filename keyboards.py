from config import LOADED_MODELS, SCHEDULERS
from red import get_hsettings
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def shorten(text, max_len=25):
    return text[:max_len] + "..." if text and len(text) > max_len else (text or "–Ω–µ –∑–∞–¥–∞–Ω–æ")


async def get_base_settings_menu(user_id):
    settings = await get_hsettings(user_id)
    kb = [
        # [InlineKeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='generate')],
        [InlineKeyboardButton(
            text=f"‚ú® –ü—Ä–æ–º–ø—Ç: {shorten(settings['prompt']) if settings['prompt'] else '–ù–µ –∑–∞–¥–∞–Ω'}",
            callback_data='prompt')],
        [InlineKeyboardButton(
            text=f"üí• –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {shorten(settings['negative_prompt']) if settings['prompt'] else '–ù–µ –∑–∞–¥–∞–Ω'}",
            callback_data='negative_prompt')],
        [InlineKeyboardButton(
            text=f"üî¢ –ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_images'] if settings['seed'] == '' else '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–¥'}",
            callback_data='num_images')],
        [InlineKeyboardButton(
            text="Ô∏è‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–æ–¥–µ–ª–∏",
            callback_data='model_settings')],
        [InlineKeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='generate')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def get_model_settings_menu(user_id):
    settings  = await get_hsettings(user_id)
    kb = [
        [InlineKeyboardButton(text=f"üß† –ú–æ–¥–µ–ª—å: {settings['model']}‚†Ä", callback_data='choice_model')],
        [InlineKeyboardButton(
            text=f"üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {settings['width']}x{settings['height']}",
            callback_data='resolution')],
        [InlineKeyboardButton(
            text=f"üë£ –®–∞–≥–æ–≤: {settings['steps']}",
            callback_data='steps')],
        [InlineKeyboardButton(
            text=f"üå°Ô∏è Cfg: {settings['guidance_scale']}",
            callback_data='guidance_scale')],
        [InlineKeyboardButton(
            text=f"üß¨ –°–∏–¥: {settings['seed'] if settings['seed'] != '' else '—Ä–∞–Ω–¥–æ–º'}",
            callback_data='seed')],
        [InlineKeyboardButton(text=f"üß© CUDA: {'True' if settings['cuda'] else 'False'}", callback_data='cuda')],
        [InlineKeyboardButton(text=f"üéõÔ∏è Scheduler: {settings['scheduler']}", callback_data='scheduler')],
        [InlineKeyboardButton(text="Ô∏è‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def get_model_menu(user_id):
    model = dict(await get_hsettings(user_id))['model']
    kb = [
        [InlineKeyboardButton(text=model, callback_data=model)] for model in LOADED_MODELS.keys()
    ]
    kb.append([InlineKeyboardButton(text="Ô∏è‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='model_settings')])
    return InlineKeyboardMarkup(inline_keyboard=kb), model


async def get_scheduler_menu(user_id):
    scheduler = dict(await get_hsettings(user_id))['scheduler']
    kb = [
        [InlineKeyboardButton(text=scheduler, callback_data=scheduler)] for scheduler in SCHEDULERS
    ]
    kb.append([InlineKeyboardButton(text="Ô∏è‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='model_settings')])
    return InlineKeyboardMarkup(inline_keyboard=kb), scheduler
